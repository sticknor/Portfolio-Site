{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Subs = exports.Subscribe = void 0;\n/**\n * Static functions for subscribing and unsubscribing to and from events.\n */\nclass Subscribe {\n  /**\n   * Call a function that adds a listener and returns a function that will unsubscribe the listener.\n   *\n   * The function passed in will be called immediately to add the listener,\n   * and its Unsubscribe function will be returned.\n   *\n   * @param subscribe The subscribe function, which returns an Unsubscribe. Will be called immediately.\n   * @returns The Unsubscribe function for this subscription.\n   */\n  static subscribe(subscribe) {\n    try {\n      return subscribe();\n    } catch (e) {\n      console.error(e);\n    }\n    return () => {\n      // No-op when catching an error\n    };\n  }\n  /**\n   * Subscribe to an emitter event. Returns a function that will unsubscribe the listener.\n   *\n   * @param eventEmitter The [EventEmitter](https://nodejs.org/api/events.html#class-eventemitter) to subscribe to.\n   * @param eventName The name of the event to listen for.\n   * @param listener The listener callback that is called when the event occurs.\n   * @returns The Unsubscribe function for this subscription.\n   */\n  static subscribeEvent(eventEmitter, eventName, listener) {\n    eventEmitter.addListener(eventName, listener);\n    return () => {\n      eventEmitter.removeListener(eventName, listener);\n    };\n  }\n  /**\n   * Appends an event listener for events whose type attribute value is type. The callback argument sets the callback\n   * that will be invoked when the event is dispatched.\n   *\n   * The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the\n   * method behaves exactly as if the value was specified as options's capture.\n   *\n   * When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute\n   * value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute\n   * value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n   *\n   * Returns a function that will unsubscribe the listener.\n   *\n   * @param domObj The DOM object to subscribe to for events.\n   * @param eventName The name of the event to listen for.\n   * @param listener The listener callback that is called when the event occurs.\n   * @param options Listener-specific options. See function description.\n   * @returns The Unsubscribe function for this subscription.\n   */\n  static subscribeDOMEvent(domObj, eventName, listener, options) {\n    domObj.addEventListener(eventName, listener, options);\n    return () => {\n      domObj.removeEventListener(eventName, listener, options);\n    };\n  }\n  /**\n   * Sets a timer which executes a function once the timer expires using `setTimeout`.\n   * Returns an unsubscribe function that clears the timeout using `clearTimeout`.\n   *\n   * @param handler A function to be executed after the timer expires.\n   * @param delay The time, in milliseconds that the timer should wait before the specified function or code is executed. If this parameter is omitted, a value of 0 is used, meaning execute \"immediately\", or more accurately, the next event cycle.\n   * @param args Additional arguments which are passed through to the handler specified.\n   * @returns The Unsubscribe function for this subscription.\n   */\n  static setTimeout(handler, delay, ...args) {\n    const timeout = setTimeout(handler, delay, args);\n    return () => clearTimeout(timeout);\n  }\n  /**\n   * Repeatedly calls a function with a fixed time delay between each call using `setInterval`.\n   * Returns an unsubscribe function that clears the interval using `clearInterval`.\n   *\n   * @param handler A function to be executed after the timer expires.\n   * @param delay The time, in milliseconds (thousandths of a second), the timer should delay in between executions of the specified function or code. Defaults to 0 if not specified.\n   * @param args Additional arguments which are passed through to the handler once the timer expires.\n   * @returns The Unsubscribe function for this subscription.\n   */\n  static setInterval(handler, delay, ...args) {\n    const interval = setInterval(handler, delay, args);\n    return () => clearInterval(interval);\n  }\n  /**\n   * Call all unsubscribe functions passed in. Can pass either an array of unsubscribe functions,\n   * or a single unsubscribe function.\n   *\n   * @param unsubs An array of unsubscribe functions, or a single unsubscribe function.\n   */\n  static unsubAll(unsubs) {\n    if (Array.isArray(unsubs)) {\n      unsubs.forEach(unsub => {\n        try {\n          unsub();\n        } catch (e) {\n          console.error(e);\n        }\n      });\n    } else {\n      try {\n        unsubs();\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }\n  /**\n   * Creates and returns a cleanup function that, when called, calls all unsubscribe functions provided.\n   *\n   * @param unsubs All subscriptions to be unsubscribed when the returned cleanup function is called.\n   * @returns A cleanup function that unsubscribes all subscriptions provided.\n   */\n  static createCleanup(unsubs) {\n    return () => Subscribe.unsubAll(unsubs);\n  }\n}\nexports.Subscribe = Subscribe;\n/**\n * A Subs object can be used to subscribe and unsubscribe to events,\n * and to collect subscriptions in an array to be unsubscribed all at once.\n *\n * Calling any of the subscribe functions will add the unsubscribe function to\n * an internal array. You can then call `unsubAll()` to unsubscribe all\n * at once and clear the list.\n */\nclass Subs {\n  /**\n   * Construct a new Subs object.\n   *\n   * A Subs object can be used to subscribe and unsubscribe to events,\n   * and to collect subscriptions in an array to be unsubscribed all at once.\n   *\n   * Calling any of the subscribe functions will add the unsubscribe function to\n   * an internal array. You can then call `unsubAll()` to unsubscribe all\n   * at once and clear the list.\n   *\n   * You can optionally pass in an array of unsubscribe functions to start with.\n   *\n   * @param list Optional array of unsubscribe functions. Defaults to an empty list.\n   */\n  constructor(/** A list of unsubscribe functions for all subscribe calls that have been made. */\n  list = []) {\n    this.list = list;\n  }\n  /**\n   * Call a function that adds a listener and returns a function that will unsubscribe the listener.\n   *\n   * The function passed in will be called immediately to add the listener,\n   * and its Unsubscribe function will be returned.\n   *\n   * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n   *\n   * @param subscribe The subscribe function, which returns an Unsubscribe. Will be called immediately.\n   * @returns The Unsubscribe function for this subscription.\n   */\n  subscribe(subscribe) {\n    const unsub = Subscribe.subscribe(subscribe);\n    this.push(unsub);\n    return unsub;\n  }\n  /**\n   * Subscribe to an emitter event. Returns a function that will unsubscribe the listener.\n   *\n   * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n   *\n   * @param eventEmitter The [EventEmitter](https://nodejs.org/api/events.html#class-eventemitter) to subscribe to.\n   * @param eventName The name of the event to listen for.\n   * @param listener The listener callback that is called when the event occurs.\n   * @returns The Unsubscribe function for this subscription.\n   */\n  subscribeEvent(eventEmitter, eventName, listener) {\n    const unsub = Subscribe.subscribeEvent(eventEmitter, eventName, listener);\n    this.push(unsub);\n    return unsub;\n  }\n  /**\n   * Subscribe to an event on a DOM object (Window or Node). Returns a function that will unsubscribe the listener.\n   *\n   * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n   *\n   * @param domObj The DOM object to subscribe to for events.\n   * @param eventName The name of the event to listen for.\n   * @param listener The listener callback that is called when the event occurs.\n   * @returns The Unsubscribe function for this subscription.\n   */\n  subscribeDOMEvent(domObj, eventName, listener) {\n    const unsub = Subscribe.subscribeDOMEvent(domObj, eventName, listener);\n    this.push(unsub);\n    return unsub;\n  }\n  /**\n   * Sets a timer which executes a function once the timer expires using `setTimeout`.\n   * Returns an unsubscribe function that clears the timeout using `clearTimeout`.\n   *\n   * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n   *\n   * @param handler A function to be executed after the timer expires.\n   * @param delay The time, in milliseconds that the timer should wait before the specified function or code is executed. If this parameter is omitted, a value of 0 is used, meaning execute \"immediately\", or more accurately, the next event cycle.\n   * @param args Additional arguments which are passed through to the handler specified.\n   * @returns The Unsubscribe function for this subscription.\n   */\n  setTimeout(handler, delay, ...args) {\n    const timeout = setTimeout(handler, delay, args);\n    const unsub = () => clearTimeout(timeout);\n    this.push(unsub);\n    return unsub;\n  }\n  /**\n   * Repeatedly calls a function with a fixed time delay between each call using `setInterval`.\n   * Returns an unsubscribe function that clears the interval using `clearInterval`.\n   *\n   * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n   *\n   * @param handler A function to be executed after the timer expires.\n   * @param delay The time, in milliseconds (thousandths of a second), the timer should delay in between executions of the specified function or code. Defaults to 0 if not specified.\n   * @param args Additional arguments which are passed through to the handler once the timer expires.\n   * @returns The Unsubscribe function for this subscription.\n   */\n  setInterval(handler, delay, ...args) {\n    const interval = setInterval(handler, delay, args);\n    const unsub = () => clearInterval(interval);\n    this.push(unsub);\n    return unsub;\n  }\n  /**\n   * Pushes an unsubscribe function onto the subscription list.\n   *\n   * You can unsubscribe all by calling `unsubAll()`.\n   *\n   * @param unsub The unsubscribe function to push to the subscription list.\n   */\n  push(unsub) {\n    this.list.push(unsub);\n  }\n  /**\n   * Call all unsubscribe functions and clear the unsubscribe list.\n   */\n  unsubAll() {\n    Subscribe.unsubAll(this.list);\n    // Empty the array, maintain the reference\n    this.list.splice(0, this.list.length);\n  }\n  /**\n   * Creates and returns a cleanup function that, when called, calls all unsubscribe functions and clears the unsubscribe list.\n   *\n   * @returns A cleanup function that unsubscribes all subscriptions and clears the unsubscribe list.\n   */\n  createCleanup() {\n    return () => {\n      this.unsubAll();\n    };\n  }\n}\nexports.Subs = Subs;","map":{"version":3,"names":["Object","defineProperty","exports","value","Subs","Subscribe","subscribe","e","console","error","subscribeEvent","eventEmitter","eventName","listener","addListener","removeListener","subscribeDOMEvent","domObj","options","addEventListener","removeEventListener","setTimeout","handler","delay","args","timeout","clearTimeout","setInterval","interval","clearInterval","unsubAll","unsubs","Array","isArray","forEach","unsub","createCleanup","constructor","list","push","splice","length"],"sources":["/Users/samticknor/Portfolio-Site/node_modules/react-sub-unsub/dist/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Subs = exports.Subscribe = void 0;\n/**\n * Static functions for subscribing and unsubscribing to and from events.\n */\nclass Subscribe {\n    /**\n     * Call a function that adds a listener and returns a function that will unsubscribe the listener.\n     *\n     * The function passed in will be called immediately to add the listener,\n     * and its Unsubscribe function will be returned.\n     *\n     * @param subscribe The subscribe function, which returns an Unsubscribe. Will be called immediately.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    static subscribe(subscribe) {\n        try {\n            return subscribe();\n        }\n        catch (e) {\n            console.error(e);\n        }\n        return () => {\n            // No-op when catching an error\n        };\n    }\n    /**\n     * Subscribe to an emitter event. Returns a function that will unsubscribe the listener.\n     *\n     * @param eventEmitter The [EventEmitter](https://nodejs.org/api/events.html#class-eventemitter) to subscribe to.\n     * @param eventName The name of the event to listen for.\n     * @param listener The listener callback that is called when the event occurs.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    static subscribeEvent(eventEmitter, eventName, listener) {\n        eventEmitter.addListener(eventName, listener);\n        return () => {\n            eventEmitter.removeListener(eventName, listener);\n        };\n    }\n    /**\n     * Appends an event listener for events whose type attribute value is type. The callback argument sets the callback\n     * that will be invoked when the event is dispatched.\n     *\n     * The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the\n     * method behaves exactly as if the value was specified as options's capture.\n     *\n     * When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute\n     * value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute\n     * value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n     *\n     * Returns a function that will unsubscribe the listener.\n     *\n     * @param domObj The DOM object to subscribe to for events.\n     * @param eventName The name of the event to listen for.\n     * @param listener The listener callback that is called when the event occurs.\n     * @param options Listener-specific options. See function description.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    static subscribeDOMEvent(domObj, eventName, listener, options) {\n        domObj.addEventListener(eventName, listener, options);\n        return () => {\n            domObj.removeEventListener(eventName, listener, options);\n        };\n    }\n    /**\n     * Sets a timer which executes a function once the timer expires using `setTimeout`.\n     * Returns an unsubscribe function that clears the timeout using `clearTimeout`.\n     *\n     * @param handler A function to be executed after the timer expires.\n     * @param delay The time, in milliseconds that the timer should wait before the specified function or code is executed. If this parameter is omitted, a value of 0 is used, meaning execute \"immediately\", or more accurately, the next event cycle.\n     * @param args Additional arguments which are passed through to the handler specified.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    static setTimeout(handler, delay, ...args) {\n        const timeout = setTimeout(handler, delay, args);\n        return () => clearTimeout(timeout);\n    }\n    /**\n     * Repeatedly calls a function with a fixed time delay between each call using `setInterval`.\n     * Returns an unsubscribe function that clears the interval using `clearInterval`.\n     *\n     * @param handler A function to be executed after the timer expires.\n     * @param delay The time, in milliseconds (thousandths of a second), the timer should delay in between executions of the specified function or code. Defaults to 0 if not specified.\n     * @param args Additional arguments which are passed through to the handler once the timer expires.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    static setInterval(handler, delay, ...args) {\n        const interval = setInterval(handler, delay, args);\n        return () => clearInterval(interval);\n    }\n    /**\n     * Call all unsubscribe functions passed in. Can pass either an array of unsubscribe functions,\n     * or a single unsubscribe function.\n     *\n     * @param unsubs An array of unsubscribe functions, or a single unsubscribe function.\n     */\n    static unsubAll(unsubs) {\n        if (Array.isArray(unsubs)) {\n            unsubs.forEach((unsub) => {\n                try {\n                    unsub();\n                }\n                catch (e) {\n                    console.error(e);\n                }\n            });\n        }\n        else {\n            try {\n                unsubs();\n            }\n            catch (e) {\n                console.error(e);\n            }\n        }\n    }\n    /**\n     * Creates and returns a cleanup function that, when called, calls all unsubscribe functions provided.\n     *\n     * @param unsubs All subscriptions to be unsubscribed when the returned cleanup function is called.\n     * @returns A cleanup function that unsubscribes all subscriptions provided.\n     */\n    static createCleanup(unsubs) {\n        return () => Subscribe.unsubAll(unsubs);\n    }\n}\nexports.Subscribe = Subscribe;\n/**\n * A Subs object can be used to subscribe and unsubscribe to events,\n * and to collect subscriptions in an array to be unsubscribed all at once.\n *\n * Calling any of the subscribe functions will add the unsubscribe function to\n * an internal array. You can then call `unsubAll()` to unsubscribe all\n * at once and clear the list.\n */\nclass Subs {\n    /**\n     * Construct a new Subs object.\n     *\n     * A Subs object can be used to subscribe and unsubscribe to events,\n     * and to collect subscriptions in an array to be unsubscribed all at once.\n     *\n     * Calling any of the subscribe functions will add the unsubscribe function to\n     * an internal array. You can then call `unsubAll()` to unsubscribe all\n     * at once and clear the list.\n     *\n     * You can optionally pass in an array of unsubscribe functions to start with.\n     *\n     * @param list Optional array of unsubscribe functions. Defaults to an empty list.\n     */\n    constructor(\n    /** A list of unsubscribe functions for all subscribe calls that have been made. */\n    list = []) {\n        this.list = list;\n    }\n    /**\n     * Call a function that adds a listener and returns a function that will unsubscribe the listener.\n     *\n     * The function passed in will be called immediately to add the listener,\n     * and its Unsubscribe function will be returned.\n     *\n     * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param subscribe The subscribe function, which returns an Unsubscribe. Will be called immediately.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    subscribe(subscribe) {\n        const unsub = Subscribe.subscribe(subscribe);\n        this.push(unsub);\n        return unsub;\n    }\n    /**\n     * Subscribe to an emitter event. Returns a function that will unsubscribe the listener.\n     *\n     * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param eventEmitter The [EventEmitter](https://nodejs.org/api/events.html#class-eventemitter) to subscribe to.\n     * @param eventName The name of the event to listen for.\n     * @param listener The listener callback that is called when the event occurs.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    subscribeEvent(eventEmitter, eventName, listener) {\n        const unsub = Subscribe.subscribeEvent(eventEmitter, eventName, listener);\n        this.push(unsub);\n        return unsub;\n    }\n    /**\n     * Subscribe to an event on a DOM object (Window or Node). Returns a function that will unsubscribe the listener.\n     *\n     * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param domObj The DOM object to subscribe to for events.\n     * @param eventName The name of the event to listen for.\n     * @param listener The listener callback that is called when the event occurs.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    subscribeDOMEvent(domObj, eventName, listener) {\n        const unsub = Subscribe.subscribeDOMEvent(domObj, eventName, listener);\n        this.push(unsub);\n        return unsub;\n    }\n    /**\n     * Sets a timer which executes a function once the timer expires using `setTimeout`.\n     * Returns an unsubscribe function that clears the timeout using `clearTimeout`.\n     *\n     * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param handler A function to be executed after the timer expires.\n     * @param delay The time, in milliseconds that the timer should wait before the specified function or code is executed. If this parameter is omitted, a value of 0 is used, meaning execute \"immediately\", or more accurately, the next event cycle.\n     * @param args Additional arguments which are passed through to the handler specified.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    setTimeout(handler, delay, ...args) {\n        const timeout = setTimeout(handler, delay, args);\n        const unsub = () => clearTimeout(timeout);\n        this.push(unsub);\n        return unsub;\n    }\n    /**\n     * Repeatedly calls a function with a fixed time delay between each call using `setInterval`.\n     * Returns an unsubscribe function that clears the interval using `clearInterval`.\n     *\n     * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param handler A function to be executed after the timer expires.\n     * @param delay The time, in milliseconds (thousandths of a second), the timer should delay in between executions of the specified function or code. Defaults to 0 if not specified.\n     * @param args Additional arguments which are passed through to the handler once the timer expires.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    setInterval(handler, delay, ...args) {\n        const interval = setInterval(handler, delay, args);\n        const unsub = () => clearInterval(interval);\n        this.push(unsub);\n        return unsub;\n    }\n    /**\n     * Pushes an unsubscribe function onto the subscription list.\n     *\n     * You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param unsub The unsubscribe function to push to the subscription list.\n     */\n    push(unsub) {\n        this.list.push(unsub);\n    }\n    /**\n     * Call all unsubscribe functions and clear the unsubscribe list.\n     */\n    unsubAll() {\n        Subscribe.unsubAll(this.list);\n        // Empty the array, maintain the reference\n        this.list.splice(0, this.list.length);\n    }\n    /**\n     * Creates and returns a cleanup function that, when called, calls all unsubscribe functions and clears the unsubscribe list.\n     *\n     * @returns A cleanup function that unsubscribes all subscriptions and clears the unsubscribe list.\n     */\n    createCleanup() {\n        return () => {\n            this.unsubAll();\n        };\n    }\n}\nexports.Subs = Subs;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}