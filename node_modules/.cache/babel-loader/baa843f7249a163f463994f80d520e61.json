{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samticknor/Portfolio-Site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/samticknor/Portfolio-Site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Subs = exports.Subscribe = void 0;\n/**\n * Static functions for subscribing and unsubscribing to and from events.\n */\nvar Subscribe = /*#__PURE__*/function () {\n  function Subscribe() {\n    _classCallCheck(this, Subscribe);\n  }\n  _createClass(Subscribe, null, [{\n    key: \"subscribe\",\n    /**\n     * Call a function that adds a listener and returns a function that will unsubscribe the listener.\n     *\n     * The function passed in will be called immediately to add the listener,\n     * and its Unsubscribe function will be returned.\n     *\n     * @param subscribe The subscribe function, which returns an Unsubscribe. Will be called immediately.\n     * @returns The Unsubscribe function for this subscription.\n     */\n    value: function subscribe(_subscribe) {\n      try {\n        return _subscribe();\n      } catch (e) {\n        console.error(e);\n      }\n      return function () {\n        // No-op when catching an error\n      };\n    }\n    /**\n     * Subscribe to an emitter event. Returns a function that will unsubscribe the listener.\n     *\n     * @param eventEmitter The [EventEmitter](https://nodejs.org/api/events.html#class-eventemitter) to subscribe to.\n     * @param eventName The name of the event to listen for.\n     * @param listener The listener callback that is called when the event occurs.\n     * @returns The Unsubscribe function for this subscription.\n     */\n  }, {\n    key: \"subscribeEvent\",\n    value: function subscribeEvent(eventEmitter, eventName, listener) {\n      eventEmitter.addListener(eventName, listener);\n      return function () {\n        eventEmitter.removeListener(eventName, listener);\n      };\n    }\n    /**\n     * Appends an event listener for events whose type attribute value is type. The callback argument sets the callback\n     * that will be invoked when the event is dispatched.\n     *\n     * The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the\n     * method behaves exactly as if the value was specified as options's capture.\n     *\n     * When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute\n     * value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute\n     * value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n     *\n     * Returns a function that will unsubscribe the listener.\n     *\n     * @param domObj The DOM object to subscribe to for events.\n     * @param eventName The name of the event to listen for.\n     * @param listener The listener callback that is called when the event occurs.\n     * @param options Listener-specific options. See function description.\n     * @returns The Unsubscribe function for this subscription.\n     */\n  }, {\n    key: \"subscribeDOMEvent\",\n    value: function subscribeDOMEvent(domObj, eventName, listener, options) {\n      domObj.addEventListener(eventName, listener, options);\n      return function () {\n        domObj.removeEventListener(eventName, listener, options);\n      };\n    }\n    /**\n     * Sets a timer which executes a function once the timer expires using `setTimeout`.\n     * Returns an unsubscribe function that clears the timeout using `clearTimeout`.\n     *\n     * @param handler A function to be executed after the timer expires.\n     * @param delay The time, in milliseconds that the timer should wait before the specified function or code is executed. If this parameter is omitted, a value of 0 is used, meaning execute \"immediately\", or more accurately, the next event cycle.\n     * @param args Additional arguments which are passed through to the handler specified.\n     * @returns The Unsubscribe function for this subscription.\n     */\n  }, {\n    key: \"setTimeout\",\n    value: function (_setTimeout) {\n      function setTimeout(_x, _x2) {\n        return _setTimeout.apply(this, arguments);\n      }\n      setTimeout.toString = function () {\n        return _setTimeout.toString();\n      };\n      return setTimeout;\n    }(function (handler, delay) {\n      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n      }\n      var timeout = setTimeout(handler, delay, args);\n      return function () {\n        return clearTimeout(timeout);\n      };\n    })\n    /**\n     * Repeatedly calls a function with a fixed time delay between each call using `setInterval`.\n     * Returns an unsubscribe function that clears the interval using `clearInterval`.\n     *\n     * @param handler A function to be executed after the timer expires.\n     * @param delay The time, in milliseconds (thousandths of a second), the timer should delay in between executions of the specified function or code. Defaults to 0 if not specified.\n     * @param args Additional arguments which are passed through to the handler once the timer expires.\n     * @returns The Unsubscribe function for this subscription.\n     */\n  }, {\n    key: \"setInterval\",\n    value: function (_setInterval) {\n      function setInterval(_x3, _x4) {\n        return _setInterval.apply(this, arguments);\n      }\n      setInterval.toString = function () {\n        return _setInterval.toString();\n      };\n      return setInterval;\n    }(function (handler, delay) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n      var interval = setInterval(handler, delay, args);\n      return function () {\n        return clearInterval(interval);\n      };\n    })\n    /**\n     * Call all unsubscribe functions passed in. Can pass either an array of unsubscribe functions,\n     * or a single unsubscribe function.\n     *\n     * @param unsubs An array of unsubscribe functions, or a single unsubscribe function.\n     */\n  }, {\n    key: \"unsubAll\",\n    value: function unsubAll(unsubs) {\n      if (Array.isArray(unsubs)) {\n        unsubs.forEach(function (unsub) {\n          try {\n            unsub();\n          } catch (e) {\n            console.error(e);\n          }\n        });\n      } else {\n        try {\n          unsubs();\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n    /**\n     * Creates and returns a cleanup function that, when called, calls all unsubscribe functions provided.\n     *\n     * @param unsubs All subscriptions to be unsubscribed when the returned cleanup function is called.\n     * @returns A cleanup function that unsubscribes all subscriptions provided.\n     */\n  }, {\n    key: \"createCleanup\",\n    value: function createCleanup(unsubs) {\n      return function () {\n        return Subscribe.unsubAll(unsubs);\n      };\n    }\n  }]);\n  return Subscribe;\n}();\nexports.Subscribe = Subscribe;\n/**\n * A Subs object can be used to subscribe and unsubscribe to events,\n * and to collect subscriptions in an array to be unsubscribed all at once.\n *\n * Calling any of the subscribe functions will add the unsubscribe function to\n * an internal array. You can then call `unsubAll()` to unsubscribe all\n * at once and clear the list.\n */\nvar Subs = /*#__PURE__*/function () {\n  /**\n   * Construct a new Subs object.\n   *\n   * A Subs object can be used to subscribe and unsubscribe to events,\n   * and to collect subscriptions in an array to be unsubscribed all at once.\n   *\n   * Calling any of the subscribe functions will add the unsubscribe function to\n   * an internal array. You can then call `unsubAll()` to unsubscribe all\n   * at once and clear the list.\n   *\n   * You can optionally pass in an array of unsubscribe functions to start with.\n   *\n   * @param list Optional array of unsubscribe functions. Defaults to an empty list.\n   */\n  function Subs() {\n    var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    _classCallCheck(this, Subs);\n    this.list = list;\n  }\n  /**\n   * Call a function that adds a listener and returns a function that will unsubscribe the listener.\n   *\n   * The function passed in will be called immediately to add the listener,\n   * and its Unsubscribe function will be returned.\n   *\n   * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n   *\n   * @param subscribe The subscribe function, which returns an Unsubscribe. Will be called immediately.\n   * @returns The Unsubscribe function for this subscription.\n   */\n  _createClass(Subs, [{\n    key: \"subscribe\",\n    value: function subscribe(_subscribe2) {\n      var unsub = Subscribe.subscribe(_subscribe2);\n      this.push(unsub);\n      return unsub;\n    }\n    /**\n     * Subscribe to an emitter event. Returns a function that will unsubscribe the listener.\n     *\n     * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param eventEmitter The [EventEmitter](https://nodejs.org/api/events.html#class-eventemitter) to subscribe to.\n     * @param eventName The name of the event to listen for.\n     * @param listener The listener callback that is called when the event occurs.\n     * @returns The Unsubscribe function for this subscription.\n     */\n  }, {\n    key: \"subscribeEvent\",\n    value: function subscribeEvent(eventEmitter, eventName, listener) {\n      var unsub = Subscribe.subscribeEvent(eventEmitter, eventName, listener);\n      this.push(unsub);\n      return unsub;\n    }\n    /**\n     * Subscribe to an event on a DOM object (Window or Node). Returns a function that will unsubscribe the listener.\n     *\n     * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param domObj The DOM object to subscribe to for events.\n     * @param eventName The name of the event to listen for.\n     * @param listener The listener callback that is called when the event occurs.\n     * @returns The Unsubscribe function for this subscription.\n     */\n  }, {\n    key: \"subscribeDOMEvent\",\n    value: function subscribeDOMEvent(domObj, eventName, listener) {\n      var unsub = Subscribe.subscribeDOMEvent(domObj, eventName, listener);\n      this.push(unsub);\n      return unsub;\n    }\n    /**\n     * Sets a timer which executes a function once the timer expires using `setTimeout`.\n     * Returns an unsubscribe function that clears the timeout using `clearTimeout`.\n     *\n     * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param handler A function to be executed after the timer expires.\n     * @param delay The time, in milliseconds that the timer should wait before the specified function or code is executed. If this parameter is omitted, a value of 0 is used, meaning execute \"immediately\", or more accurately, the next event cycle.\n     * @param args Additional arguments which are passed through to the handler specified.\n     * @returns The Unsubscribe function for this subscription.\n     */\n  }, {\n    key: \"setTimeout\",\n    value: function (_setTimeout2) {\n      function setTimeout(_x5, _x6) {\n        return _setTimeout2.apply(this, arguments);\n      }\n      setTimeout.toString = function () {\n        return _setTimeout2.toString();\n      };\n      return setTimeout;\n    }(function (handler, delay) {\n      for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        args[_key3 - 2] = arguments[_key3];\n      }\n      var timeout = setTimeout(handler, delay, args);\n      var unsub = function unsub() {\n        return clearTimeout(timeout);\n      };\n      this.push(unsub);\n      return unsub;\n    })\n    /**\n     * Repeatedly calls a function with a fixed time delay between each call using `setInterval`.\n     * Returns an unsubscribe function that clears the interval using `clearInterval`.\n     *\n     * The Unsubscribe function will be added to the internal list of unsubs. You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param handler A function to be executed after the timer expires.\n     * @param delay The time, in milliseconds (thousandths of a second), the timer should delay in between executions of the specified function or code. Defaults to 0 if not specified.\n     * @param args Additional arguments which are passed through to the handler once the timer expires.\n     * @returns The Unsubscribe function for this subscription.\n     */\n  }, {\n    key: \"setInterval\",\n    value: function (_setInterval2) {\n      function setInterval(_x7, _x8) {\n        return _setInterval2.apply(this, arguments);\n      }\n      setInterval.toString = function () {\n        return _setInterval2.toString();\n      };\n      return setInterval;\n    }(function (handler, delay) {\n      for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n        args[_key4 - 2] = arguments[_key4];\n      }\n      var interval = setInterval(handler, delay, args);\n      var unsub = function unsub() {\n        return clearInterval(interval);\n      };\n      this.push(unsub);\n      return unsub;\n    })\n    /**\n     * Pushes an unsubscribe function onto the subscription list.\n     *\n     * You can unsubscribe all by calling `unsubAll()`.\n     *\n     * @param unsub The unsubscribe function to push to the subscription list.\n     */\n  }, {\n    key: \"push\",\n    value: function push(unsub) {\n      this.list.push(unsub);\n    }\n    /**\n     * Call all unsubscribe functions and clear the unsubscribe list.\n     */\n  }, {\n    key: \"unsubAll\",\n    value: function unsubAll() {\n      Subscribe.unsubAll(this.list);\n      // Empty the array, maintain the reference\n      this.list.splice(0, this.list.length);\n    }\n    /**\n     * Creates and returns a cleanup function that, when called, calls all unsubscribe functions and clears the unsubscribe list.\n     *\n     * @returns A cleanup function that unsubscribes all subscriptions and clears the unsubscribe list.\n     */\n  }, {\n    key: \"createCleanup\",\n    value: function createCleanup() {\n      var _this = this;\n      return function () {\n        _this.unsubAll();\n      };\n    }\n  }]);\n  return Subs;\n}();\nexports.Subs = Subs;","map":null,"metadata":{},"sourceType":"script"}